// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -source=./interface.go -destination=../mocks/proc_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "biathlon/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
	isgomock struct{}
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// GetLog mocks base method.
func (m *MockProcessor) GetLog() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetLog indicates an expected call of GetLog.
func (mr *MockProcessorMockRecorder) GetLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockProcessor)(nil).GetLog))
}

// GetResult mocks base method.
func (m *MockProcessor) GetResult() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockProcessorMockRecorder) GetResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockProcessor)(nil).GetResult))
}

// Process mocks base method.
func (m *MockProcessor) Process(event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessorMockRecorder) Process(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process), event)
}
